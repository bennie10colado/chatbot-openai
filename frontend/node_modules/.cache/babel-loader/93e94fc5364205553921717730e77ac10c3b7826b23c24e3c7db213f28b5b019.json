{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\nconst createChatbot = async formData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/openai/openai`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (response.status === 200) {\n      console.log('Chatbot criado com sucesso!');\n      return response.data;\n    } else {\n      console.error('Erro ao criar o chatbot');\n      throw new Error('Erro ao criar o chatbot');\n    }\n  } catch (error) {\n    console.error('Erro ao enviar a solicitação para o backend', error);\n    throw new Error('Erro ao enviar a solicitação para o backend');\n  }\n};\nconst sendMessage = async (message, chatbotName) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/openai/send-message`, {\n      message,\n      chatbotName\n    });\n    return response.data.openaiResponse;\n  } catch (error) {\n    console.error('Erro ao enviar mensagem para a API da OpenAI:', error);\n    throw new Error('Erro ao enviar mensagem para a API da OpenAI');\n  }\n};\nconst getAvailableBots = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/get-available-bots`);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao obter a lista de bots disponíveis:', error);\n    throw new Error('Erro ao obter a lista de bots disponíveis');\n  }\n};\nconst openaiService = {\n  createChatbot,\n  sendMessage,\n  getAvailableBots\n};\nexport default openaiService;","map":{"version":3,"names":["axios","API_BASE_URL","createChatbot","formData","response","post","headers","status","console","log","data","error","Error","sendMessage","message","chatbotName","openaiResponse","getAvailableBots","get","openaiService"],"sources":["C:/Users/ben/Desktop/Benjamin/ELIFE/CAPACITACAO/DESAFIO/definitive/chatbot-openai/frontend/src/api/OpenAiService.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\nconst createChatbot = async (formData) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/openai/openai`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n    );\r\n\r\n    if (response.status === 200) {\r\n      console.log('Chatbot criado com sucesso!');\r\n      return response.data;\r\n    } else {\r\n      console.error('Erro ao criar o chatbot');\r\n      throw new Error('Erro ao criar o chatbot');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erro ao enviar a solicitação para o backend', error);\r\n    throw new Error('Erro ao enviar a solicitação para o backend');\r\n  }\r\n};\r\n\r\nconst sendMessage = async (message, chatbotName) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/openai/send-message`,\r\n      { message, chatbotName }\r\n    );\r\n\r\n    return response.data.openaiResponse;\r\n  } catch (error) {\r\n    console.error('Erro ao enviar mensagem para a API da OpenAI:', error);\r\n    throw new Error('Erro ao enviar mensagem para a API da OpenAI');\r\n  }\r\n};\r\n\r\nconst getAvailableBots = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/get-available-bots`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao obter a lista de bots disponíveis:', error);\r\n    throw new Error('Erro ao obter a lista de bots disponíveis');\r\n  }\r\n};\r\n\r\nconst openaiService = {\r\n  createChatbot,\r\n  sendMessage,\r\n  getAvailableBots,\r\n};\r\n\r\nexport default openaiService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC9B,GAAEJ,YAAa,gBAAe,EAC/BE,QAAQ,EACR;MACEG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IAED,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAOL,QAAQ,CAACM,IAAI;IACtB,CAAC,MAAM;MACLF,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;MACxC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;AACF,CAAC;AAED,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,WAAW,KAAK;EAClD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC9B,GAAEJ,YAAa,sBAAqB,EACrC;MAAEa,OAAO;MAAEC;IAAY,CACzB,CAAC;IAED,OAAOX,QAAQ,CAACM,IAAI,CAACM,cAAc;EACrC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACrE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;AACF,CAAC;AAED,MAAMK,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACkB,GAAG,CAAE,GAAEjB,YAAa,qBAAoB,CAAC;IACtE,OAAOG,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC;AAED,MAAMO,aAAa,GAAG;EACpBjB,aAAa;EACbW,WAAW;EACXI;AACF,CAAC;AAED,eAAeE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}