{"ast":null,"code":"import axios from 'axios';\n\n//const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst API_REQUEST_URL = process.env.REACT_APP_API_REQUEST_URL;\nconst createChatbot = async formData => {\n  try {\n    const response = await axios.post(`${API_REQUEST_URL}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (response.status === 200) {\n      console.log('Chatbot criado com sucesso!');\n      return response.data;\n    } else {\n      console.error('Erro ao criar o chatbot');\n      throw new Error('Erro ao criar o chatbot');\n    }\n  } catch (error) {\n    console.error('Erro ao enviar a solicitação para o backend', error);\n    throw new Error('Erro ao enviar a solicitação para o backend');\n  }\n};\n\n//const sendMessage = async (message, chatbotName) => {};\n\nconst openaiService = {\n  createChatbot\n  //sendMessage,\n};\n\nexport default openaiService;","map":{"version":3,"names":["axios","API_REQUEST_URL","process","env","REACT_APP_API_REQUEST_URL","createChatbot","formData","response","post","headers","status","console","log","data","error","Error","openaiService"],"sources":["C:/Users/ben/Desktop/Benjamin/ELIFE/CAPACITACAO/DESAFIO/definitive/chatbot-openai/frontend/src/api/OpenAiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n//const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\nconst API_REQUEST_URL = process.env.REACT_APP_API_REQUEST_URL;\r\n\r\nconst createChatbot = async (formData) => {\r\n  try {\r\n    const response = await axios.post(`${API_REQUEST_URL}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      console.log('Chatbot criado com sucesso!');\r\n      return response.data; \r\n    } else {\r\n      console.error('Erro ao criar o chatbot');\r\n      throw new Error('Erro ao criar o chatbot');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erro ao enviar a solicitação para o backend', error);\r\n    throw new Error('Erro ao enviar a solicitação para o backend');\r\n  }\r\n};\r\n\r\n//const sendMessage = async (message, chatbotName) => {};\r\n\r\nconst openaiService = {\r\n  createChatbot,\r\n  //sendMessage,\r\n};\r\n\r\nexport default openaiService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAE7D,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAE,GAAEP,eAAgB,EAAC,EAAEK,QAAQ,EAAE;MAChEG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAOL,QAAQ,CAACM,IAAI;IACtB,CAAC,MAAM;MACLF,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;MACxC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;AACF,CAAC;;AAED;;AAEA,MAAMC,aAAa,GAAG;EACpBX;EACA;AACF,CAAC;;AAED,eAAeW,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}